/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> hset=new HashSet<>();
        ListNode itr=headA;
        while(itr!=null){
            hset.add(itr);
            itr=itr.next;
        }
        itr=headB;
        while(itr!=null){
            if(hset.contains(itr)){
                return itr;
            }
            itr=itr.next;
        }
        return null;
    }
}


solution 2 better
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode itrA=headA;
        ListNode itrB=headB;
        int sizeA=0,sizeB=0;
        while(itrA!=null&&itrB!=null){
            sizeA++;
            sizeB++;
            itrA=itrA.next;
            itrB=itrB.next;
        }
        if(itrA==null){
            while(itrB!=null){
                sizeB++;
                itrB=itrB.next;
            }
        }else{
            while(itrA!=null){
                sizeA++;
                itrA=itrA.next;
            }
        }
        itrA=headA;
        itrB=headB;
        if(sizeA>sizeB){
            for(int i=0;i<sizeA-sizeB;i++)
                itrA=itrA.next;
        }else if(sizeB>sizeA){
            for(int i=0;i<sizeB-sizeA;i++)
                itrB=itrB.next;
        }
        while(itrA!=null){
            if(itrA==itrB)
                return itrA;
            itrA=itrA.next;
            itrB=itrB.next;
        }
        return null;
    }
}